/*
A class Employee is given to you. It contains the following:



Employee:



Instance Variables: 

name:String private  

employeeId: int private

salary: double private





Methods: set and get methods for all.

Default constructor AND All-fields constructor



An Enum called ManagerType is given to you. It defines the two types of managers, HR and Sales





Create two sub classes of Employee called Manager and Clerk. 

The details of each class is given below.



For class manager:

Instance Variables:

type: enum ManagerType private





Methods: set and get methods for type. 

Default constructor AND All-fields constructor



Override :

setSalary(): If the type is HR manager, add 10000 to the given salary. 

and for a sales manager, add 5000 to the given salary.



For class Clerk:

Instance Variables: 

speed: int

accuracy:int



Methods: set and get methods for speed and accuracy.

Default constructor AND All-fields constructor.



Override:

setSalary(): If the clerk has a typing speed of greater than 70 AND accuracy greater than 80 then add 1000 to the salary. Otherwise set the same salary. 

Note that any change in speed and accuracy(using setSpeed() or setAccuracy() ) should result in 

recalculation of salary, as the Trainee may qualify for the extra amount. 

HOWEVER, when once the extra 1000 is given for extra speed/ and accuracy it should not be given again.

For example, if a Clerk's speed is already 85 and accuracy is already 75, and the speed is changed to 90, 

then the extra amount should not be added again. This extra amount should be credited to salary only the first time the Clerk qualifies for the amount.

Provide proper constructors for all classes.
*/
class Employee {
// Declare Instances Variable
	private String name;
	private int employeeId;
	private double salary;

	// Define Getters And Setters Methods
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	public Employee() {
		// Initialize Instance Variable

	}

	public Employee(String name, int empId, double salary) {
		// Initialize Instance Variable
		this.name = name;
		this.employeeId = empId;
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [name=" + name + ", employeeId=" + employeeId + ", salary=" + salary + "]";
	}
	
}

enum ManagerType {
//Define Objects
	HR, Sales
};


class Manager extends Employee{

//Declare Instances Variable
	private ManagerType type;

	// Define Getter and Setters Methods
	public ManagerType getType() {
		return type;
	}

	public void setType(ManagerType type) {
		this.type = type;
	}	
	
	public Manager() {
	    //Initialize Instance Variable
	}

	public Manager(String name, int employeeId, double salary,ManagerType type) {
	//Initialize Instance Variable
		super(name, employeeId, salary);
	        this.type = type;
	}
	@Override
	public void setSalary(double salary) {
	// Write Logic Here
		if (type == ManagerType.HR) {
            super.setSalary(salary + 10000);
        } else if (type == ManagerType.Sales) {
            super.setSalary(salary + 5000);
        }
	}
}

// Clerk

class Clerk extends Employee {
// Declare Instances Variable
	private int speed;
	private int accuracy;
	int c=0;

	// Define Getter and Setters Methods
	public int getSpeed() {
		return speed;
	}

	public void setSpeed(int speed) {
		this.speed = speed;

	}

	public int getAccuracy() {
		return accuracy;
	}

	public void setAccuracy(int accuracy) {
		this.accuracy = accuracy;

	}

	public Clerk() {
	}

	public Clerk(String name, int empId, double salary,int speed,int accuracy) {
		super(name, empId, salary);
		this.speed = speed;
		this.accuracy = accuracy;
	}

	@Override
	public void setSalary(double salary) {
		// Write Logic Here
		if (speed > 70 && accuracy > 80 && c<1) {
			super.setSalary(salary + 1000);
			c++;
		} else {
			super.setSalary(salary);
		}
	}
}
public class EmployeeTester
{
    public static void main(String[] args)
    {
        Employee e=new Employee("Sripriya", 102, 10000);
		Manager m=new Manager("Tannu", 101, 2000, ManagerType.HR);
		Clerk c=new Clerk("nisha", 103, 2300, 80,85);
		System.out.println(e);
		m.setSalary(m.getSalary());
		System.out.println(m.toString());
		c.setSalary(c.getSalary());
		System.out.println(c.toString()+" "+c.getAccuracy()+" "+c.getSpeed());
		c.setAccuracy(90);
		System.out.println(c.toString()+" "+c.getAccuracy()+" "+c.getSpeed()+" "+c.getSalary());
    }
}
